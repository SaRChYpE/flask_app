name: CI/CD
on:
  push:
    branches: [main, master]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2  
      - name: Set up Python
        uses: actions/setup-python@v2
      - name: Install dependecies
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          pip install -r requirements.txt 
      - name: Code Analysis
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
  
  build-image:
     runs-on: ubuntu-latest
     outputs:
       image-tag: ${{ steps.build-docker-image.outputs.image-tag }}
     steps:
       - name: Checkout
         uses: actions/checkout@v2
       - name: Build Docker image
         id: build-docker-image
         env:
          IMAGE_TAG: "1.0.0"
          ECR_REPOSITORY: ${{ vars.REPO_NAME }}
         run: |
          docker build -t flaskapp:${IMAGE_TAG} .
          echo "::set-output name=image-tag::${IMAGE_TAG}"
       - name: Export Docker image to .tar
         run: |
          docker save -o flaskapp_image.tar flaskapp:${IMAGE_TAG}
       - name: Upload Docker image tar
         uses: actions/upload-artifact@v4
         with:
          name: flaskapp-image
          path: flaskapp_image.tar
          
  deploy:
    name: Deploy to Amazon ECR
    runs-on: ubuntu-latest
    needs: build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Download Docker image tar
        uses: actions/download-artifact@v4
        with:
          name: flaskapp-image
          path: ./

      - name: Load Docker image from .tar
        run: |
          docker load -i flaskapp_image.tar
          
      - name: Push Docker image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ vars.REPO_NAME }}
          IMAGE_TAG: ${{ needs.build-image.outputs.image-tag }}
        run: |
          docker tag flaskapp:${IMAGE_TAG} ${ECR_REGISTRY}/$ECR_REPOSITORY:${IMAGE_TAG}
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${IMAGE_TAG}
